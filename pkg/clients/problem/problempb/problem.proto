syntax = "proto3";

package pb;

option go_package = "./";

service ProblemService{
    rpc GetAllProblems(ProbNoParam) returns(ProblemList);
    rpc GetProblemWithTestCases(ProblemId) returns (GetProblemResponse);

    rpc SubmitCode(SubmissionRequest) returns(SubmissionResponse);
    rpc GetUserStats(UserID) returns(StatsResponse);

    rpc GetProblemStats (ProblemStatsRequest) returns (ProblemStatsResponse);
    rpc GetLeaderboard(LeaderboardRequest) returns (LeaderboardResponse);
}

message LeaderboardRequest {}

message LeaderboardEntry {
    string user_id = 1;
    int32 solved_count = 2;
    int32 rank = 3;
}

message LeaderboardResponse {
    repeated LeaderboardEntry leaderboard = 1;
}

message ProblemStatsRequest {}

message ProblemStatsResponse {
    int32 total_problems = 1;
    int32 easy_problems = 2;
    int32 medium_problems = 3;
    int32 hard_problems = 4;
    map<string, int32> type_problem_count = 5;
    int32 premium_problems = 6;
    int32 non_premium_problems = 7;
}

message StatsResponse {
    string user_id = 1;
    int32 total_attempts = 2;
    int32 total_successful_submissions = 3;
    int32 total_failed_submissions = 4;
    int32 easy_attempts = 5;
    int32 medium_attempts = 6;
    int32 hard_attempts = 7;
}

message UserID{
    string ID = 1;
}

message SubmissionResponse {
    enum Status {
      OK = 0;    
      ERROR = 1; 
    }
    
    Status status = 1;             
    string message = 2;             
    int32 passed = 3;               
    int32 failed = 4;               
    string submission_id = 5;
}

message SubmissionRequest {
    string user_id = 1;       
    int32 problem_id = 2;    
    string code = 3;           
    string language = 4;    
}

message TestCase{
    string test_case_id = 1;
    string input = 2;
    string expected_output = 3;
}

message ProblemWithTestCases {
    Problem problem = 1;
    repeated TestCase test_cases = 2;
}

message GetProblemResponse {
    enum Status {
        OK = 0;
        ERROR = 1;
    }

    Status status = 1;
    string message = 2;
    oneof payload {
        string error = 3;
        ProblemWithTestCases data = 4;
    }
}

message ProblemId {
    int32 ID = 1;
}

message ProblemList {
    repeated Problem problems = 1;
}

message Problem{
    uint32 ID = 1;
    string Title = 2;
    string Discription = 3;
    string Difficulty = 4;
    string Type = 5;
    bool IsPremium = 6;
}

message ProblemResponse {
    enum Status {
        OK = 0;
        ERROR = 1;
    }

    Status status = 1;
    string message = 2;
    oneof payload {
        string error = 3;
        string data = 4;
    }
}

message ProbNoParam{}